// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function isValidSubname(name) {
  var length = name.length;
  if (length === 0) {
    return [
            false,
            undefined
          ];
  }
  if (length < 3) {
    return [
            false,
            "Name is too short"
          ];
  }
  if (length > 32) {
    return [
            false,
            "Name is too long"
          ];
  }
  var validCharRegex = /^[a-zA-Z0-9-]+$/;
  var isValidFormat = validCharRegex.test(name);
  if (isValidFormat) {
    if (Caml_obj.equal(name[0], "-") || Caml_obj.equal(name[length - 1 | 0], "-")) {
      return [
              false,
              "Cannot start or end with hyphen"
            ];
    } else {
      return [
              true,
              undefined
            ];
    }
  } else {
    return [
            false,
            "Invalid characters"
          ];
  }
}

function checkAvailability(name) {
  return new Promise((function (resolve, reject) {
                setTimeout((function () {
                        resolve(true);
                      }), 2000);
              }));
}

function SubnameInput(props) {
  var onValidChange = props.onValidChange;
  var match = React.useState(function () {
        return {
                value: "",
                isValid: false,
                errorMessage: undefined,
                isChecking: false,
                isAvailable: undefined
              };
      });
  var setState = match[1];
  var state = match[0];
  var timeoutRef = React.useRef(undefined);
  var checkNameAvailability = async function (value) {
    setState(function (prev) {
          return {
                  value: prev.value,
                  isValid: prev.isValid,
                  errorMessage: prev.errorMessage,
                  isChecking: true,
                  isAvailable: undefined
                };
        });
    try {
      var available = await checkAvailability(value);
      return setState(function (prev) {
                  return {
                          value: prev.value,
                          isValid: prev.isValid,
                          errorMessage: prev.errorMessage,
                          isChecking: false,
                          isAvailable: available
                        };
                });
    }
    catch (exn){
      return setState(function (prev) {
                  return {
                          value: prev.value,
                          isValid: prev.isValid,
                          errorMessage: "Failed to check availability",
                          isChecking: false,
                          isAvailable: prev.isAvailable
                        };
                });
    }
  };
  var handleChange = function ($$event) {
    var newValue = $$event.target.value;
    setState(function (prev) {
          return {
                  value: newValue,
                  isValid: prev.isValid,
                  errorMessage: prev.errorMessage,
                  isChecking: prev.isChecking,
                  isAvailable: prev.isAvailable
                };
        });
    var timeout = timeoutRef.current;
    if (timeout !== undefined) {
      clearTimeout(Caml_option.valFromOption(timeout));
    }
    var timeout$1 = setTimeout((function () {
            var match = isValidSubname(newValue);
            var errorMessage = match[1];
            var isValid = match[0];
            setState(function (prev) {
                  return {
                          value: prev.value,
                          isValid: isValid,
                          errorMessage: errorMessage,
                          isChecking: prev.isChecking,
                          isAvailable: prev.isAvailable
                        };
                });
            onValidChange(newValue, isValid);
            if (isValid && newValue !== "") {
              checkNameAvailability(newValue);
            }
            
          }), 500);
    timeoutRef.current = Caml_option.some(timeout$1);
  };
  var handleClear = function (param) {
    setState(function (param) {
          return {
                  value: "",
                  isValid: false,
                  errorMessage: undefined,
                  isChecking: false,
                  isAvailable: undefined
                };
        });
    onValidChange("", false);
  };
  var error = state.errorMessage;
  var tmp;
  if (error !== undefined) {
    tmp = JsxRuntime.jsx("div", {
          children: JsxRuntime.jsx("div", {
                children: error,
                className: "text-gray-600 text-md"
              }),
          className: "px-6 py-4"
        });
  } else if (state.isValid && state.value !== "") {
    var tmp$1;
    if (state.isChecking) {
      tmp$1 = JsxRuntime.jsx("div", {
            children: JsxRuntime.jsxs("svg", {
                  children: [
                    JsxRuntime.jsx("circle", {
                          className: "opacity-25",
                          cx: "12",
                          cy: "12",
                          r: "10",
                          stroke: "currentColor",
                          strokeWidth: "4"
                        }),
                    JsxRuntime.jsx("path", {
                          className: "opacity-75",
                          d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z",
                          fill: "currentColor"
                        })
                  ],
                  className: "w-5 h-5 text-blue-600",
                  fill: "none",
                  viewBox: "0 0 24 24",
                  xmlns: "http://www.w3.org/2000/svg"
                }),
            className: "animate-spin"
          });
    } else {
      var match$1 = state.isAvailable;
      tmp$1 = match$1 !== undefined ? (
          match$1 ? JsxRuntime.jsx("button", {
                  children: "Register",
                  className: "rounded-xl bg-blue-600 px-3 py-1.5 text-sm font-medium text-white hover:bg-blue-500",
                  type: "button"
                }) : JsxRuntime.jsx("span", {
                  children: "Already registered",
                  className: "text-red-500 text-sm"
                })
        ) : null;
    }
    tmp = JsxRuntime.jsx("div", {
          children: JsxRuntime.jsxs("div", {
                children: [
                  JsxRuntime.jsx("p", {
                        children: state.value + ".ringdao.eth",
                        className: "text-gray-700"
                      }),
                  tmp$1
                ],
                className: "flex items-center justify-between"
              }),
          className: "px-6 py-4"
        });
  } else {
    tmp = null;
  }
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx("input", {
                                    className: "w-full px-6 py-4 text-lg focus:outline-none",
                                    placeholder: "SEARCH FOR A NAME",
                                    type: "text",
                                    value: state.value,
                                    onChange: handleChange
                                  }),
                              JsxRuntime.jsxs("div", {
                                    children: [
                                      state.value !== "" ? JsxRuntime.jsx("button", {
                                              children: JsxRuntime.jsx("svg", {
                                                    children: JsxRuntime.jsx("path", {
                                                          d: "M18 6L6 18M6 6L18 18",
                                                          stroke: "#999999",
                                                          strokeLinecap: "round",
                                                          strokeLinejoin: "round",
                                                          strokeWidth: "2"
                                                        }),
                                                    height: "24",
                                                    width: "24",
                                                    fill: "none",
                                                    viewBox: "0 0 24 24",
                                                    xmlns: "http://www.w3.org/2000/svg"
                                                  }),
                                              className: "p-1 hover:bg-gray-100 rounded-full transition-colors",
                                              type: "button",
                                              onClick: handleClear
                                            }) : null,
                                      state.value === "" ? JsxRuntime.jsx("svg", {
                                              children: JsxRuntime.jsx("path", {
                                                    d: "M21 21L16.5 16.5M19 11C19 15.4183 15.4183 19 11 19C6.58172 19 3 15.4183 3 11C3 6.58172 6.58172 3 11 3C15.4183 3 19 6.58172 19 11Z",
                                                    stroke: "#999999",
                                                    strokeLinecap: "round",
                                                    strokeLinejoin: "round",
                                                    strokeWidth: "2"
                                                  }),
                                              height: "24",
                                              width: "24",
                                              fill: "none",
                                              viewBox: "0 0 24 24",
                                              xmlns: "http://www.w3.org/2000/svg"
                                            }) : null
                                    ],
                                    className: "absolute right-4 top-1/2 -translate-y-1/2 flex items-center gap-2"
                                  })
                            ],
                            className: "relative " + (
                              Core__Option.isSome(state.errorMessage) || state.isValid && state.value !== "" ? "divide-y-short" : ""
                            )
                          }),
                      tmp
                    ],
                    className: "bg-white rounded-custom shadow-lg overflow-hidden"
                  }),
              className: "w-full max-w-xl mx-auto"
            });
}

var make = SubnameInput;

export {
  make ,
}
/* react Not a pure module */
