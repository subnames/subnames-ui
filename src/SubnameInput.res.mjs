// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icons from "./components/Icons.res.mjs";
import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as FeePanel from "./components/FeePanel.res.mjs";
import * as Constants from "./Constants.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as NameContext from "./NameContext.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import ConfettiReact from "confetti-react";
import * as OnChainOperations from "./OnChainOperations.res.mjs";

var initialState = {
  name: "",
  isRegistering: false,
  onChainStatus: "Simulating",
  value: "",
  isValid: false,
  errorMessage: undefined,
  isChecking: false,
  isAvailable: undefined,
  showFeeSelect: false,
  showResultPanel: false,
  registeredName: undefined
};

function isValidSubname(name) {
  var length = name.length;
  if (length === 0) {
    return [
            false,
            undefined
          ];
  }
  if (length < 3) {
    return [
            false,
            "Name is too short"
          ];
  }
  if (length > 32) {
    return [
            false,
            "Name is too long"
          ];
  }
  var validCharRegex = /^[a-zA-Z0-9-]+$/;
  var isValidFormat = validCharRegex.test(name);
  if (isValidFormat) {
    if (Caml_obj.equal(name[0], "-") || Caml_obj.equal(name[length - 1 | 0], "-")) {
      return [
              false,
              "Cannot start or end with hyphen"
            ];
    } else {
      return [
              true,
              undefined
            ];
    }
  } else {
    return [
            false,
            "Invalid characters"
          ];
  }
}

function SubnameInput(props) {
  var onValidChange = props.onValidChange;
  var match = NameContext.use();
  var setUpdateName = match.setUpdateName;
  var match$1 = React.useState(function () {
        return initialState;
      });
  var setState = match$1[1];
  var state = match$1[0];
  var timeoutRef = React.useRef(undefined);
  var checkNameAvailability = async function (value) {
    setState(function (prev) {
          return {
                  name: prev.name,
                  isRegistering: prev.isRegistering,
                  onChainStatus: prev.onChainStatus,
                  value: prev.value,
                  isValid: prev.isValid,
                  errorMessage: prev.errorMessage,
                  isChecking: true,
                  isAvailable: undefined,
                  showFeeSelect: prev.showFeeSelect,
                  showResultPanel: prev.showResultPanel,
                  registeredName: prev.registeredName
                };
        });
    try {
      var available = await OnChainOperations.available(value);
      console.log(available);
      return setState(function (prev) {
                  return {
                          name: prev.name,
                          isRegistering: prev.isRegistering,
                          onChainStatus: prev.onChainStatus,
                          value: prev.value,
                          isValid: prev.isValid,
                          errorMessage: prev.errorMessage,
                          isChecking: false,
                          isAvailable: available,
                          showFeeSelect: prev.showFeeSelect,
                          showResultPanel: prev.showResultPanel,
                          registeredName: prev.registeredName
                        };
                });
    }
    catch (exn){
      return setState(function (prev) {
                  return {
                          name: prev.name,
                          isRegistering: prev.isRegistering,
                          onChainStatus: prev.onChainStatus,
                          value: prev.value,
                          isValid: prev.isValid,
                          errorMessage: "Failed to check availability",
                          isChecking: false,
                          isAvailable: prev.isAvailable,
                          showFeeSelect: prev.showFeeSelect,
                          showResultPanel: prev.showResultPanel,
                          registeredName: prev.registeredName
                        };
                });
    }
  };
  var handleChange = function ($$event) {
    var newValue = $$event.target.value;
    setState(function (prev) {
          return {
                  name: prev.name,
                  isRegistering: prev.isRegistering,
                  onChainStatus: prev.onChainStatus,
                  value: newValue,
                  isValid: prev.isValid,
                  errorMessage: prev.errorMessage,
                  isChecking: prev.isChecking,
                  isAvailable: prev.isAvailable,
                  showFeeSelect: prev.showFeeSelect,
                  showResultPanel: prev.showResultPanel,
                  registeredName: prev.registeredName
                };
        });
    var timeout = timeoutRef.current;
    if (timeout !== undefined) {
      clearTimeout(Caml_option.valFromOption(timeout));
    }
    var timeout$1 = setTimeout((function () {
            var match = isValidSubname(newValue);
            var errorMessage = match[1];
            var isValid = match[0];
            setState(function (prev) {
                  return {
                          name: prev.name,
                          isRegistering: prev.isRegistering,
                          onChainStatus: prev.onChainStatus,
                          value: prev.value,
                          isValid: isValid,
                          errorMessage: errorMessage,
                          isChecking: prev.isChecking,
                          isAvailable: prev.isAvailable,
                          showFeeSelect: prev.showFeeSelect,
                          showResultPanel: prev.showResultPanel,
                          registeredName: prev.registeredName
                        };
                });
            onValidChange(newValue, isValid);
            if (isValid && newValue !== "") {
              checkNameAvailability(newValue);
            }
            
          }), 500);
    timeoutRef.current = Caml_option.some(timeout$1);
  };
  var handleClear = function (param) {
    setState(function (param) {
          return initialState;
        });
    onValidChange("", false);
  };
  var handleOnChainStatusChange = function (status) {
    setState(function (prev) {
          return {
                  name: prev.name,
                  isRegistering: prev.isRegistering,
                  onChainStatus: status,
                  value: prev.value,
                  isValid: prev.isValid,
                  errorMessage: prev.errorMessage,
                  isChecking: prev.isChecking,
                  isAvailable: prev.isAvailable,
                  showFeeSelect: prev.showFeeSelect,
                  showResultPanel: prev.showResultPanel,
                  registeredName: prev.registeredName
                };
        });
  };
  var handleRegister = function (years) {
    setState(function (prev) {
          return {
                  name: prev.name,
                  isRegistering: true,
                  onChainStatus: prev.onChainStatus,
                  value: prev.value,
                  isValid: prev.isValid,
                  errorMessage: prev.errorMessage,
                  isChecking: prev.isChecking,
                  isAvailable: prev.isAvailable,
                  showFeeSelect: prev.showFeeSelect,
                  showResultPanel: prev.showResultPanel,
                  registeredName: prev.registeredName
                };
        });
    var walletClient = OnChainOperations.buildWalletClient();
    OnChainOperations.register(walletClient, state.value, years, undefined, handleOnChainStatusChange).then(function () {
          setState(function (prev) {
                return {
                        name: "",
                        isRegistering: false,
                        onChainStatus: "Simulating",
                        value: "",
                        isValid: false,
                        errorMessage: undefined,
                        isChecking: false,
                        isAvailable: undefined,
                        showFeeSelect: false,
                        showResultPanel: true,
                        registeredName: state.value
                      };
              });
          onValidChange("", false);
          setUpdateName(function (param) {
                return true;
              });
          return Promise.resolve();
        });
  };
  var error = state.onChainStatus;
  if (typeof error !== "object") {
    switch (error) {
      case "Simulating" :
          break;
      case "WaitingForSignature" :
          break;
      case "Broadcasting" :
          break;
      case "Confirmed" :
          break;
      
    }
  }
  var tmp;
  if (state.showResultPanel) {
    tmp = React.createElement("div", {
          className: "bg-white rounded-custom shadow-lg overflow-hidden"
        }, React.createElement("div", {
              className: "p-6"
            }, React.createElement("div", {
                  className: "flex flex-col items-center text-center"
                }, React.createElement("div", {
                      className: "mb-4"
                    }, React.createElement(Icons.Success.make, {
                          className: "w-16 h-16 text-green-500"
                        })), React.createElement("h2", {
                      className: "text-2xl font-bold mb-2"
                    }, "Registration Successful!"), React.createElement("p", {
                      className: "text-lg text-gray-700 mb-6"
                    }, React.createElement(ConfettiReact, {
                          recycle: false
                        }), Core__Option.getOr(state.registeredName, "") + "." + Constants.sld), React.createElement("button", {
                      className: "py-3 px-6 bg-zinc-800 hover:bg-zinc-700 text-white rounded-2xl font-medium",
                      onClick: (function (param) {
                          setState(function (param) {
                                return initialState;
                              });
                        })
                    }, "Register Another Name"))));
  } else if (state.showFeeSelect) {
    tmp = React.createElement("div", {
          className: "bg-white rounded-custom shadow-lg overflow-hidden"
        }, React.createElement(FeePanel.make, {
              name: state.value,
              isWalletConnected: props.isWalletConnected,
              isRegistering: state.isRegistering,
              onBack: (function () {
                  setState(function (prev) {
                        return {
                                name: prev.name,
                                isRegistering: prev.isRegistering,
                                onChainStatus: prev.onChainStatus,
                                value: prev.value,
                                isValid: prev.isValid,
                                errorMessage: prev.errorMessage,
                                isChecking: prev.isChecking,
                                isAvailable: prev.isAvailable,
                                showFeeSelect: false,
                                showResultPanel: prev.showResultPanel,
                                registeredName: prev.registeredName
                              };
                      });
                }),
              onConnectWallet: props.onConnectWallet,
              onRegister: handleRegister
            }));
  } else {
    var error$1 = state.errorMessage;
    var tmp$1;
    if (error$1 !== undefined) {
      tmp$1 = React.createElement("div", {
            className: "px-6 py-4"
          }, React.createElement("div", {
                className: "text-gray-600 text-md"
              }, error$1));
    } else if (state.isValid && state.value !== "") {
      var tmp$2;
      if (state.isChecking) {
        tmp$2 = React.createElement(Icons.Spinner.make, {
              className: "w-5 h-5 text-zinc-600"
            });
      } else {
        var match$2 = state.isAvailable;
        tmp$2 = match$2 !== undefined ? (
            match$2 ? React.createElement("button", {
                    className: "rounded-xl bg-zinc-800 px-3 py-1.5 text-sm font-medium text-white hover:bg-zinc-700",
                    type: "button",
                    onClick: (function (param) {
                        setState(function (prev) {
                              return {
                                      name: prev.name,
                                      isRegistering: prev.isRegistering,
                                      onChainStatus: prev.onChainStatus,
                                      value: prev.value,
                                      isValid: prev.isValid,
                                      errorMessage: prev.errorMessage,
                                      isChecking: prev.isChecking,
                                      isAvailable: prev.isAvailable,
                                      showFeeSelect: true,
                                      showResultPanel: prev.showResultPanel,
                                      registeredName: prev.registeredName
                                    };
                            });
                      })
                  }, "Next") : React.createElement("span", {
                    className: "text-red-500 text-sm"
                  }, "Not available")
          ) : null;
      }
      tmp$1 = React.createElement("div", {
            className: "px-6 py-4"
          }, React.createElement("div", {
                className: "flex items-center justify-between"
              }, React.createElement("p", {
                    className: "text-gray-700"
                  }, state.value + "." + Constants.sld), tmp$2));
    } else {
      tmp$1 = null;
    }
    tmp = React.createElement("div", {
          className: "bg-white rounded-custom shadow-lg overflow-hidden"
        }, React.createElement("div", {
              className: "relative " + (
                Core__Option.isSome(state.errorMessage) || state.isValid && state.value !== "" ? "divide-y-short" : ""
              )
            }, React.createElement("input", {
                  className: "w-full px-6 py-4 text-lg focus:outline-none",
                  placeholder: "SEARCH FOR A NAME",
                  type: "text",
                  value: state.value,
                  onChange: handleChange
                }), React.createElement("div", {
                  className: "absolute right-4 top-1/2 -translate-y-1/2 flex items-center gap-2"
                }, state.value !== "" ? React.createElement("button", {
                        className: "p-1 hover:bg-gray-100 rounded-full transition-colors",
                        type: "button",
                        onClick: handleClear
                      }, React.createElement(Icons.Close.make, {})) : null, state.value === "" ? React.createElement(Icons.Search.make, {}) : null)), tmp$1);
  }
  return React.createElement("div", {
              className: "w-full max-w-xl mx-auto"
            }, tmp);
}

var make = SubnameInput;

export {
  make ,
}
/* Icons Not a pure module */
