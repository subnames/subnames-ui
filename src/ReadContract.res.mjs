// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Viem from "viem";
import * as Ens from "viem/ens";
import * as Constants from "./Constants.res.mjs";

var registryContract = {
  address: Constants.registryContractAddress,
  abi: [{
      type: "function",
      name: "recordExists",
      inputs: [{
          name: "node",
          type: "bytes32"
        }],
      outputs: [{
          name: "",
          type: "bool"
        }],
      stateMutability: "view"
    }]
};

var controllerContract = {
  address: Constants.controllerContractAddress,
  abi: [
    {
      type: "function",
      name: "available",
      inputs: [{
          name: "name",
          type: "string"
        }],
      outputs: [{
          name: "",
          type: "bool"
        }],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "registerPrice",
      inputs: [
        {
          name: "name",
          type: "string"
        },
        {
          name: "duration",
          type: "uint256"
        }
      ],
      outputs: [{
          name: "",
          type: "uint256"
        }],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "renew",
      inputs: [
        {
          name: "name",
          type: "string"
        },
        {
          name: "duration",
          type: "uint256"
        }
      ],
      outputs: [],
      stateMutability: "payable"
    }
  ]
};

var client = Viem.createPublicClient({
      chain: Viem.koi,
      transport: Viem.http(Constants.rpcUrl)
    });

async function recordExists(name) {
  var domain = name + "." + Constants.sld;
  var node = Ens.namehash(domain);
  console.log("domain: \"" + domain + "\", node: \"" + node + "\"");
  return await client.readContract({
              address: registryContract.address,
              abi: registryContract.abi,
              functionName: "recordExists",
              args: [node]
            });
}

async function available(name) {
  return await client.readContract({
              address: controllerContract.address,
              abi: controllerContract.abi,
              functionName: "available",
              args: [name]
            });
}

async function registerPrice(name, duration) {
  var args = [
    name,
    duration
  ];
  return BigInt(await client.readContract({
                  address: controllerContract.address,
                  abi: controllerContract.abi,
                  functionName: "registerPrice",
                  args: args
                }));
}

export {
  registryContract ,
  controllerContract ,
  client ,
  recordExists ,
  available ,
  registerPrice ,
}
/* client Not a pure module */
