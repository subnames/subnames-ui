// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";

async function doQuery(endpoint, query, variables) {
  var body = variables !== undefined ? Object.fromEntries([
          [
            "query",
            query
          ],
          [
            "variables",
            variables
          ]
        ]) : Object.fromEntries([[
            "query",
            query
          ]]);
  var response = await fetch(endpoint, {
        method: "POST",
        body: Caml_option.some(Core__Option.getOr(JSON.stringify(body), "")),
        headers: Caml_option.some(new Headers({
                  "Content-type": "application/json"
                }))
      });
  var json = await response.json();
  return Core__Option.getOr(Core__JSON.Decode.object(json), {});
}

async function makeRequest(endpoint, query, variables, param) {
  var response = await doQuery(endpoint, query, variables);
  var data = response["data"];
  var errors = response["errors"];
  return {
          data: Core__Option.flatMap(data, Core__JSON.Decode.object),
          errors: Core__Option.flatMap(errors, (function (json) {
                  return Core__Option.map(Core__JSON.Decode.array(json), (function (arr) {
                                return Belt_Array.keepMap(arr, (function (error) {
                                              return Core__Option.flatMap(Core__JSON.Decode.object(error), (function (dict) {
                                                            return Core__Option.map(Core__Option.flatMap(dict["message"], Core__JSON.Decode.string), (function (message) {
                                                                          return {
                                                                                  message: message
                                                                                };
                                                                        }));
                                                          }));
                                            }));
                              }));
                }))
        };
}

export {
  doQuery ,
  makeRequest ,
}
/* No side effect */
