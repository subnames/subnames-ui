// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as DateFns from "date-fns";
import * as Core__Int from "@rescript/core/src/Core__Int.res.mjs";
import * as Core__JSON from "@rescript/core/src/Core__JSON.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";

function useDebounce(callback, delay) {
  var timeoutRef = React.useRef(undefined);
  return function (value) {
    var timeout = timeoutRef.current;
    if (timeout !== undefined) {
      clearTimeout(Caml_option.valFromOption(timeout));
    }
    var timeout$1 = setTimeout((function () {
            callback(value);
          }), delay);
    timeoutRef.current = Caml_option.some(timeout$1);
  };
}

function distanceToExpiry(date) {
  return DateFns.formatDistanceToNow(date, {
              addSuffix: true
            });
}

function timestampToDate(timestamp) {
  return new Date(timestamp * 1000.0);
}

function timestampStringToDate(timestamp) {
  var intTimestamp = Core__Option.getExn(Core__Int.fromString(timestamp, undefined), undefined);
  return timestampToDate(intTimestamp);
}

function getString(jsonObj, fieldName) {
  return Core__Option.getExn(Core__Option.flatMap(jsonObj[fieldName], Core__JSON.Decode.string), "Failed to decode ${fieldName}");
}

function getObject(jsonObj, fieldName, f) {
  return Core__Option.getExn(Core__Option.map(Core__Option.flatMap(jsonObj[fieldName], Core__JSON.Decode.object), f), "Failed to decode ${fieldName}");
}

function getArray(jsonObj, fieldName, f) {
  return Core__Option.getExn(Core__Option.map(Core__Option.flatMap(jsonObj[fieldName], Core__JSON.Decode.array), f), "Failed to decode ${fieldName}");
}

export {
  useDebounce ,
  distanceToExpiry ,
  timestampToDate ,
  timestampStringToDate ,
  getString ,
  getObject ,
  getArray ,
}
/* react Not a pure module */
