// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as NameContext from "../NameContext.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as OnChainOperations from "../OnChainOperations.res.mjs";
import * as Rainbowkit from "@rainbow-me/rainbowkit";

var Custom = {};

var ConnectButton = {
  Custom: Custom
};

function MyConnectButton(props) {
  return React.createElement(Rainbowkit.ConnectButton.Custom, {
              children: (function (props) {
                  var match = React.useState(function () {
                        return "Loading...";
                      });
                  var setName = match[1];
                  var name = match[0];
                  var match$1 = NameContext.use();
                  var mounted = props.mounted;
                  var openConnectModal = props.openConnectModal;
                  var openChainModal = props.openChainModal;
                  var openAccountModal = props.openAccountModal;
                  var chain = props.chain;
                  var account = props.account;
                  var setUpdateName = match$1.setUpdateName;
                  var updateName = match$1.updateName;
                  React.useEffect((function () {
                          if (account !== undefined) {
                            OnChainOperations.name(account.address).then(function (resolvedName) {
                                  if (resolvedName === "") {
                                    setName(function (param) {
                                          return account.address;
                                        });
                                  } else {
                                    setName(function (param) {
                                          return resolvedName;
                                        });
                                  }
                                  return Promise.resolve();
                                });
                          }
                          
                        }), [account]);
                  React.useEffect((function () {
                          Core__Option.map(account, (function (a) {
                                  if (updateName) {
                                    OnChainOperations.name(a.address).then(function (resolvedName) {
                                          if (resolvedName === "") {
                                            setName(function (param) {
                                                  return a.address;
                                                });
                                          } else {
                                            setName(function (param) {
                                                  return resolvedName;
                                                });
                                          }
                                          setUpdateName(function (param) {
                                                return false;
                                              });
                                          return Promise.resolve();
                                        });
                                  }
                                  
                                }));
                        }), [updateName]);
                  var connected = mounted && Core__Option.isSome(account) && Core__Option.isSome(chain);
                  var ariaHidden = !mounted;
                  var style = mounted ? ({}) : ({
                        opacity: "0",
                        userSelect: "none",
                        pointerEvents: "none"
                      });
                  var buttonClasses = "bg-zinc-800 text-white px-4 py-2 rounded-xl border-none cursor-pointer text-sm font-medium transition-colors hover:bg-zinc-700";
                  return React.createElement("div", {
                              "aria-hidden": ariaHidden,
                              style: style
                            }, (function () {
                                  if (connected) {
                                    if (chain.unsupported) {
                                      return React.createElement("button", {
                                                  className: buttonClasses,
                                                  onClick: openChainModal
                                                }, "Wrong network");
                                    } else {
                                      return React.createElement("div", {
                                                  className: "flex gap-3"
                                                }, React.createElement("button", {
                                                      className: buttonClasses,
                                                      onClick: openAccountModal
                                                    }, name, Core__Option.isSome(account.displayBalance) ? " (" + account.displayBalance + ")" : null));
                                    }
                                  } else {
                                    return React.createElement("button", {
                                                className: buttonClasses,
                                                "data-testid": "rk-connect-button",
                                                onClick: openConnectModal
                                              }, "Connect Wallet");
                                  }
                                })());
                })
            });
}

var make = MyConnectButton;

export {
  ConnectButton ,
  make ,
}
/* react Not a pure module */
