// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Constants from "../Constants.res.mjs";
import * as NameContext from "../NameContext.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as OnChainOperations from "../OnChainOperations.res.mjs";
import * as Rainbowkit from "@rainbow-me/rainbowkit";

var Custom = {};

var ConnectButton = {
  Custom: Custom
};

function updatePrimaryName(account, setPrimaryName) {
  return Core__Option.map(account, (async function (acc) {
                var resolvedName = await OnChainOperations.name(acc.address);
                if (resolvedName === "") {
                  return setPrimaryName(function (param) {
                              
                            });
                }
                var fullName = resolvedName.endsWith(Constants.sld) ? resolvedName : resolvedName + "." + Constants.sld;
                var subname = Core__Option.getExn(fullName.split(".")[0], undefined);
                var expiresBigInt = await OnChainOperations.nameExpires(subname);
                var primaryName = {
                  fullName: fullName,
                  name: subname,
                  expires: expiresBigInt
                };
                return setPrimaryName(function (param) {
                            return primaryName;
                          });
              }));
}

function displayName(account, primaryName) {
  if (primaryName !== undefined) {
    return primaryName.fullName;
  } else {
    return Core__Option.getExn(account, undefined).displayName;
  }
}

function MyConnectButton(props) {
  return React.createElement(Rainbowkit.ConnectButton.Custom, {
              children: (function (props) {
                  var match = NameContext.use();
                  var mounted = props.mounted;
                  var openConnectModal = props.openConnectModal;
                  var openChainModal = props.openChainModal;
                  var openAccountModal = props.openAccountModal;
                  var chain = props.chain;
                  var account = props.account;
                  var setPrimaryName = match.setPrimaryName;
                  var primaryName = match.primaryName;
                  var setForceRefresh = match.setForceRefresh;
                  var forceRefresh = match.forceRefresh;
                  var accountAddress = React.useMemo((function () {
                          return Core__Option.map(account, (function (acc) {
                                        return acc.address;
                                      }));
                        }), [account]);
                  React.useEffect((function () {
                          updatePrimaryName(account, setPrimaryName);
                        }), [accountAddress]);
                  React.useEffect((function () {
                          if (forceRefresh) {
                            updatePrimaryName(account, setPrimaryName);
                          }
                          return (function () {
                                    setForceRefresh(function (param) {
                                          return false;
                                        });
                                  });
                        }), [forceRefresh]);
                  var connected = mounted && Core__Option.isSome(account) && Core__Option.isSome(chain);
                  var ariaHidden = !mounted;
                  var style = mounted ? ({}) : ({
                        opacity: "0",
                        userSelect: "none",
                        pointerEvents: "none"
                      });
                  var buttonClasses = "bg-zinc-800 text-white px-4 py-2 rounded-xl border-none cursor-pointer text-sm font-medium transition-colors hover:bg-zinc-700";
                  return React.createElement("div", {
                              "aria-hidden": ariaHidden,
                              style: style
                            }, (function () {
                                  if (connected) {
                                    if (chain.unsupported) {
                                      return React.createElement("button", {
                                                  className: buttonClasses,
                                                  onClick: openChainModal
                                                }, "Wrong network");
                                    } else {
                                      return React.createElement("div", {
                                                  className: "flex gap-3"
                                                }, React.createElement("button", {
                                                      className: buttonClasses,
                                                      onClick: openAccountModal
                                                    }, displayName(account, primaryName), Core__Option.isSome(account.displayBalance) ? " (" + account.displayBalance + ")" : null));
                                    }
                                  } else {
                                    return React.createElement("button", {
                                                className: buttonClasses,
                                                "data-testid": "rk-connect-button",
                                                onClick: openConnectModal
                                              }, "Connect Wallet");
                                  }
                                })());
                })
            });
}

var make = MyConnectButton;

export {
  ConnectButton ,
  updatePrimaryName ,
  displayName ,
  make ,
}
/* react Not a pure module */
