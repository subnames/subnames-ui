// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as ReverseRegistrar from "../ReverseRegistrar.res.mjs";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as OnChainOperationsCommon from "../OnChainOperationsCommon.res.mjs";

function SetPrimaryNamePanel(props) {
  var match = React.useState(function () {
        return "";
      });
  var setName = match[1];
  var name = match[0];
  var match$1 = React.useState(function () {
        return false;
      });
  var setIsWaitingForConfirmation = match$1[1];
  var isWaitingForConfirmation = match$1[0];
  var match$2 = React.useState(function () {
        
      });
  var setError = match$2[1];
  var error = match$2[0];
  var handleSetName = async function (param) {
    var walletClient = OnChainOperationsCommon.buildWalletClient();
    if (walletClient === undefined) {
      return setError(function (param) {
                  return "Please connect your wallet first";
                });
    }
    try {
      setError(function (param) {
            
          });
      setIsWaitingForConfirmation(function (param) {
            return true;
          });
      await ReverseRegistrar.setName(Caml_option.valFromOption(walletClient), name);
      return setIsWaitingForConfirmation(function (param) {
                  return false;
                });
    }
    catch (raw_obj){
      var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
      if (obj.RE_EXN_ID === Js_exn.$$Error) {
        var message = Core__Option.getOr(obj._1.message, "Unknown error occurred");
        setError(function (param) {
              return message;
            });
        return setIsWaitingForConfirmation(function (param) {
                    return false;
                  });
      }
      throw obj;
    }
  };
  return React.createElement("div", {
              className: "bg-white rounded-custom shadow-lg overflow-hidden"
            }, React.createElement("div", {
                  className: "p-4 sm:p-6 max-w-2xl mx-auto"
                }, React.createElement("div", {
                      className: "flex justify-between items-center mb-8"
                    }, React.createElement("h2", {
                          className: "text-xl font-semibold text-gray-900"
                        }, "Set Primary Name")), React.createElement("div", {
                      className: "mb-6"
                    }, React.createElement("label", {
                          className: "block text-sm font-medium text-gray-700 mb-2"
                        }, "Name"), React.createElement("input", {
                          className: "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500",
                          placeholder: "Enter name to set as primary",
                          type: "text",
                          value: name,
                          onChange: (function (e) {
                              setName(e.target.value);
                            })
                        })), error !== undefined ? React.createElement("div", {
                        className: "mb-4 p-4 bg-red-50 border border-red-200 rounded-md text-red-700"
                      }, error) : null, React.createElement("button", {
                      className: "w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 disabled:bg-gray-400",
                      disabled: isWaitingForConfirmation || name === "",
                      onClick: (function (param) {
                          handleSetName();
                        })
                    }, isWaitingForConfirmation ? "Processing..." : "Set Primary Name")));
}

var make = SetPrimaryNamePanel;

export {
  make ,
}
/* react Not a pure module */
