// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icons from "./Icons.res.mjs";
import * as Utils from "../Utils.res.mjs";
import * as React from "react";
import * as Wagmi from "wagmi";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Constants from "../Constants.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as GraphQLClient from "../GraphQLClient.res.mjs";
import * as ReverseRegistrar from "../ReverseRegistrar.res.mjs";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.res.mjs";
import * as OnChainOperationsCommon from "../OnChainOperationsCommon.res.mjs";

var UseAccount = {};

function NamesList(props) {
  var account = Wagmi.useAccount();
  var match = React.useState(function () {
        return [];
      });
  var setNames = match[1];
  var names = match[0];
  var match$1 = React.useState(function () {
        return true;
      });
  var setLoading = match$1[1];
  var match$2 = React.useState(function () {
        return false;
      });
  var setSettingPrimary = match$2[1];
  var match$3 = React.useState(function () {
        
      });
  var setError = match$3[1];
  var setPrimaryName = async function (name) {
    setSettingPrimary(function (param) {
          return true;
        });
    setError(function (param) {
          
        });
    try {
      var walletClient = OnChainOperationsCommon.buildWalletClient();
      if (walletClient !== undefined) {
        await ReverseRegistrar.setName(Caml_option.valFromOption(walletClient), name);
        return setSettingPrimary(function (param) {
                    return false;
                  });
      } else {
        setError(function (param) {
              return "Wallet connection failed";
            });
        return setSettingPrimary(function (param) {
                    return false;
                  });
      }
    }
    catch (raw_error){
      var error = Caml_js_exceptions.internalToOCamlException(raw_error);
      if (error.RE_EXN_ID === Js_exn.$$Error) {
        console.error(error._1);
        return setSettingPrimary(function (param) {
                    return false;
                  });
      } else {
        console.error("An unknown error occurred");
        return setSettingPrimary(function (param) {
                    return false;
                  });
      }
    }
  };
  React.useEffect((function () {
          if (account.isConnected) {
            var fetchNames = async function () {
              var query = "\n          query {\n            subnames(limit: 20, where: {owner: {id_eq: \"" + Core__Option.getExn(account.address, undefined).toLowerCase() + "\"}}) {\n              label\n              name\n              expires\n              owner {\n                id\n              }\n            }\n          }\n        ";
              var result = await GraphQLClient.makeRequest(Constants.indexerUrl, query, undefined, undefined);
              var data = result.data;
              var exit = 0;
              if (data !== undefined && result.errors === undefined) {
                var subnames = Core__Option.getExn(Js_json.decodeArray(Core__Option.getExn(data["subnames"], undefined)), undefined).map(function (json) {
                      var obj = Core__Option.getExn(Js_json.decodeObject(json), undefined);
                      return {
                              label: Core__Option.getExn(Js_json.decodeString(Core__Option.getExn(obj["label"], undefined)), undefined),
                              name: Core__Option.getExn(Js_json.decodeString(Core__Option.getExn(obj["name"], undefined)), undefined),
                              expires: Core__Option.getExn(Js_json.decodeString(Core__Option.getExn(obj["expires"], undefined)), undefined),
                              owner: {
                                id: Core__Option.getExn(Js_json.decodeString(Core__Option.getExn(Core__Option.getExn(Js_json.decodeObject(Core__Option.getExn(obj["owner"], undefined)), undefined)["id"], undefined)), undefined)
                              }
                            };
                    });
                setNames(function (param) {
                      return subnames;
                    });
              } else {
                exit = 1;
              }
              if (exit === 1) {
                var errors = result.errors;
                if (errors !== undefined) {
                  console.log("Errors:", errors);
                } else {
                  console.log("Unknown response");
                }
              }
              return setLoading(function (param) {
                          return false;
                        });
            };
            fetchNames();
          }
          
        }), [account.isConnected]);
  return React.createElement("div", {
              className: "p-8"
            }, React.createElement("div", {
                  className: "w-full max-w-xl mx-auto"
                }, React.createElement("div", {
                      className: "bg-white rounded-custom shadow-lg overflow-hidden"
                    }, React.createElement("div", {
                          className: "px-6 pt-4 pb-4 border-b border-gray-200 relative"
                        }, React.createElement("div", {
                              className: "text-lg"
                            }, "Your Subnames"), React.createElement("button", {
                              className: "p-1 hover:bg-gray-100 rounded-full transition-colors absolute right-4 top-1/2 -translate-y-1/2",
                              onClick: (function (param) {
                                  RescriptReactRouter.push("/");
                                })
                            }, React.createElement(Icons.Close.make, {}))), account.isConnected ? (
                        match$1[0] ? React.createElement("div", {
                                className: "text-center py-4"
                              }, "Loading...") : (
                            names.length === 0 ? React.createElement("div", {
                                    className: "text-center py-4 text-gray-500"
                                  }, "You don't have any subnames yet") : React.createElement("div", {
                                    className: "py-1"
                                  }, names.map(function (subname, index) {
                                        return React.createElement("div", {
                                                    key: subname.name
                                                  }, React.createElement("div", {
                                                        className: "px-6 py-4"
                                                      }, React.createElement("div", {
                                                            className: "flex items-center justify-between"
                                                          }, React.createElement("div", undefined, React.createElement("p", {
                                                                    className: "text-gray-800"
                                                                  }, subname.name + "." + Constants.sld), React.createElement("p", {
                                                                    className: "text-xs text-gray-400 mt-1"
                                                                  }, "Expires " + Utils.distanceToExpiry(Utils.timestampStringToDate(subname.expires)))), React.createElement("div", {
                                                                className: "flex gap-2"
                                                              }, React.createElement("button", {
                                                                    className: "rounded-xl bg-white border border-zinc-300 px-3 py-1.5 text-sm font-medium text-zinc-800 hover:bg-zinc-50",
                                                                    type: "button",
                                                                    onClick: (function (param) {
                                                                        setPrimaryName(subname.name);
                                                                      })
                                                                  }, "Set primary"), React.createElement("button", {
                                                                    className: "rounded-xl bg-white border border-zinc-300 px-3 py-1.5 text-sm font-medium text-zinc-800 hover:bg-zinc-50",
                                                                    type: "button"
                                                                  }, "Transfer"), React.createElement("button", {
                                                                    className: "rounded-xl bg-white border border-zinc-300 px-3 py-1.5 text-sm font-medium text-zinc-800 hover:bg-zinc-50",
                                                                    type: "button"
                                                                  }, "Extend")))), index < (names.length - 1 | 0) ? React.createElement("div", {
                                                          className: "border-b border-gray-200 mx-6"
                                                        }) : null);
                                      }))
                          )
                      ) : React.createElement("div", {
                            className: "text-center py-4 text-gray-500"
                          }, "Please connect your wallet to see your names"))));
}

var make = NamesList;

export {
  UseAccount ,
  make ,
}
/* Icons Not a pure module */
