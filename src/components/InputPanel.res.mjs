// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icons from "./Icons.res.mjs";
import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Constants from "../Constants.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as OnChainOperations from "../OnChainOperations.res.mjs";

var initialState = {
  value: "",
  isValid: false,
  errorMessage: undefined,
  isChecking: false,
  isAvailable: undefined
};

function isValidSubname(name) {
  var length = name.length;
  if (length === 0) {
    return [
            false,
            undefined
          ];
  }
  if (length < 3) {
    return [
            false,
            "Name is too short"
          ];
  }
  if (length > 32) {
    return [
            false,
            "Name is too long"
          ];
  }
  var validCharRegex = /^[a-zA-Z0-9-]+$/;
  var isValidFormat = validCharRegex.test(name);
  if (isValidFormat) {
    if (Caml_obj.equal(name[0], "-") || Caml_obj.equal(name[length - 1 | 0], "-")) {
      return [
              false,
              "Cannot start or end with hyphen"
            ];
    } else {
      return [
              true,
              undefined
            ];
    }
  } else {
    return [
            false,
            "Invalid characters"
          ];
  }
}

function InputPanel(props) {
  var onNext = props.onNext;
  var match = React.useState(function () {
        return initialState;
      });
  var setState = match[1];
  var state = match[0];
  var timeoutRef = React.useRef(undefined);
  var checkNameAvailability = async function (value) {
    setState(function (prev) {
          return {
                  value: prev.value,
                  isValid: prev.isValid,
                  errorMessage: prev.errorMessage,
                  isChecking: true,
                  isAvailable: undefined
                };
        });
    try {
      var available = await OnChainOperations.available(value);
      console.log(available);
      return setState(function (prev) {
                  return {
                          value: prev.value,
                          isValid: prev.isValid,
                          errorMessage: prev.errorMessage,
                          isChecking: false,
                          isAvailable: available
                        };
                });
    }
    catch (exn){
      return setState(function (prev) {
                  return {
                          value: prev.value,
                          isValid: prev.isValid,
                          errorMessage: "Failed to check availability",
                          isChecking: false,
                          isAvailable: prev.isAvailable
                        };
                });
    }
  };
  var handleChange = function ($$event) {
    var newValue = $$event.target.value;
    setState(function (prev) {
          return {
                  value: newValue,
                  isValid: prev.isValid,
                  errorMessage: prev.errorMessage,
                  isChecking: prev.isChecking,
                  isAvailable: prev.isAvailable
                };
        });
    var timeout = timeoutRef.current;
    if (timeout !== undefined) {
      clearTimeout(Caml_option.valFromOption(timeout));
    }
    var timeout$1 = setTimeout((function () {
            var match = isValidSubname(newValue);
            var errorMessage = match[1];
            var isValid = match[0];
            setState(function (prev) {
                  return {
                          value: prev.value,
                          isValid: isValid,
                          errorMessage: errorMessage,
                          isChecking: prev.isChecking,
                          isAvailable: prev.isAvailable
                        };
                });
            if (isValid && newValue !== "") {
              checkNameAvailability(newValue);
            }
            
          }), 500);
    timeoutRef.current = Caml_option.some(timeout$1);
  };
  var handleClear = function (param) {
    setState(function (param) {
          return initialState;
        });
  };
  var error = state.errorMessage;
  var tmp;
  if (error !== undefined) {
    tmp = React.createElement("div", {
          className: "px-6 py-4"
        }, React.createElement("div", {
              className: "text-gray-600 text-md"
            }, error));
  } else if (state.isValid && state.value !== "") {
    var tmp$1;
    if (state.isChecking) {
      tmp$1 = React.createElement(Icons.Spinner.make, {
            className: "w-5 h-5 text-zinc-600"
          });
    } else {
      var match$1 = state.isAvailable;
      tmp$1 = match$1 !== undefined ? (
          match$1 ? React.createElement("button", {
                  className: "rounded-xl bg-zinc-800 px-3 py-1.5 text-sm font-medium text-white hover:bg-zinc-700",
                  type: "button",
                  onClick: (function (param) {
                      onNext(state.value);
                    })
                }, "Next") : React.createElement("span", {
                  className: "text-red-500 text-sm"
                }, "Not available")
        ) : null;
    }
    tmp = React.createElement("div", {
          className: "px-6 py-4"
        }, React.createElement("div", {
              className: "flex items-center justify-between"
            }, React.createElement("p", {
                  className: "text-gray-700"
                }, state.value + "." + Constants.sld), tmp$1));
  } else {
    tmp = null;
  }
  return React.createElement("div", {
              className: "bg-white rounded-custom shadow-lg overflow-hidden"
            }, React.createElement("div", {
                  className: "relative " + (
                    Core__Option.isSome(state.errorMessage) || state.isValid && state.value !== "" ? "divide-y-short" : ""
                  )
                }, React.createElement("input", {
                      className: "w-full px-6 py-4 text-lg focus:outline-none",
                      placeholder: "SEARCH FOR A NAME",
                      type: "text",
                      value: state.value,
                      onChange: handleChange
                    }), React.createElement("div", {
                      className: "absolute right-4 top-1/2 -translate-y-1/2 flex items-center gap-2"
                    }, state.value !== "" ? React.createElement("button", {
                            className: "p-1 hover:bg-gray-100 rounded-full transition-colors",
                            type: "button",
                            onClick: handleClear
                          }, React.createElement(Icons.Close.make, {})) : null, state.value === "" ? React.createElement(Icons.Search.make, {}) : null)), tmp);
}

var make = InputPanel;

export {
  initialState ,
  isValidSubname ,
  make ,
}
/* Icons Not a pure module */
