// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icons from "../components/Icons.res.mjs";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as L2Resolver from "../contracts/L2Resolver.res.mjs";
import * as NameContext from "../NameContext.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import GithubUsernameRegex from "github-username-regex";
import * as OnChainOperationsCommon from "../contracts/OnChainOperationsCommon.res.mjs";

function ProfileForm(props) {
  var profile = props.profile;
  var avatar = profile[7];
  var email = profile[6];
  var website = profile[5];
  var github = profile[4];
  var telegram = profile[3];
  var twitter = profile[2];
  var $$location = profile[1];
  var description = profile[0];
  var onSave = props.onSave;
  var onCancel = props.onCancel;
  var match = React.useState(function () {
        return description;
      });
  var setDescription = match[1];
  var description$1 = match[0];
  var match$1 = React.useState(function () {
        return $$location;
      });
  var setLocation = match$1[1];
  var $$location$1 = match$1[0];
  var match$2 = React.useState(function () {
        return twitter;
      });
  var setTwitter = match$2[1];
  var twitter$1 = match$2[0];
  var match$3 = React.useState(function () {
        return telegram;
      });
  var setTelegram = match$3[1];
  var telegram$1 = match$3[0];
  var match$4 = React.useState(function () {
        return github;
      });
  var setGithub = match$4[1];
  var github$1 = match$4[0];
  var match$5 = React.useState(function () {
        return website;
      });
  var setWebsite = match$5[1];
  var website$1 = match$5[0];
  var match$6 = React.useState(function () {
        return email;
      });
  var setEmail = match$6[1];
  var email$1 = match$6[0];
  var match$7 = React.useState(function () {
        return avatar;
      });
  var setAvatar = match$7[1];
  var avatar$1 = match$7[0];
  var match$8 = React.useState(function () {
        return false;
      });
  var setLoading = match$8[1];
  var loading = match$8[0];
  var match$9 = React.useState(function () {
        
      });
  var setError = match$9[1];
  var error = match$9[0];
  var match$10 = React.useState(function () {
        
      });
  var setGithubError = match$10[1];
  var githubError = match$10[0];
  var match$11 = React.useState(function () {
        
      });
  var setEmailError = match$11[1];
  var emailError = match$11[0];
  var match$12 = React.useState(function () {
        
      });
  var setWebsiteError = match$12[1];
  var websiteError = match$12[0];
  var match$13 = React.useState(function () {
        
      });
  var setAvatarError = match$13[1];
  var avatarError = match$13[0];
  var match$14 = React.useState(function () {
        
      });
  var setTwitterError = match$14[1];
  var twitterError = match$14[0];
  var match$15 = React.useState(function () {
        
      });
  var setTelegramError = match$15[1];
  var telegramError = match$15[0];
  var match$16 = NameContext.use();
  var primaryName = match$16.primaryName;
  var validateEmail = function (email) {
    console.log("Validating email: " + Core__Option.getOr(email, "None"));
    var result;
    if (email !== undefined && email !== "") {
      var emailRegex = new RegExp("^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$");
      var isValid = emailRegex.test(email);
      console.log("Email regex test result: " + (
            isValid ? "true" : "false"
          ));
      result = isValid;
    } else {
      result = true;
    }
    console.log("Email validation result: " + (
          result ? "true" : "false"
        ));
    return result;
  };
  var validateWebsite = function (website) {
    if (website === undefined) {
      return true;
    }
    if (website === "") {
      return true;
    }
    var urlRegex = new RegExp("^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$");
    return urlRegex.test(website);
  };
  var validateGithub = function (github) {
    console.log("Validating github: " + Core__Option.getOr(github, "None"));
    var result;
    if (github !== undefined && github !== "") {
      var isValid = GithubUsernameRegex.test(github);
      console.log("Github regex test result: " + (
            isValid ? "true" : "false"
          ));
      result = isValid;
    } else {
      result = true;
    }
    console.log("Github validation result: " + (
          result ? "true" : "false"
        ));
    return result;
  };
  var validateAvatar = function (avatar) {
    console.log("Validating avatar: " + Core__Option.getOr(avatar, "None"));
    var result;
    if (avatar !== undefined && avatar !== "") {
      var isValid;
      try {
        var startsWithHttp = avatar.startsWith("http://") || avatar.startsWith("https://");
        var hasDot = avatar.indexOf(".") > 0;
        isValid = startsWithHttp && hasDot;
      }
      catch (exn){
        isValid = false;
      }
      console.log("Avatar URL validation result: " + (
            isValid ? "true" : "false"
          ));
      result = isValid;
    } else {
      result = true;
    }
    console.log("Avatar validation result: " + (
          result ? "true" : "false"
        ));
    return result;
  };
  var validateTwitter = function (twitter) {
    console.log("Validating twitter: " + Core__Option.getOr(twitter, "None"));
    var result;
    if (twitter !== undefined && twitter !== "") {
      var startsWithAt = twitter.startsWith("@");
      if (startsWithAt) {
        var usernameWithoutAt = twitter.substring(1);
        var validLength = usernameWithoutAt.length >= 1 && usernameWithoutAt.length <= 15;
        var validChars = new RegExp("^[a-zA-Z0-9_]+$").test(usernameWithoutAt);
        var isValid = validLength && validChars;
        console.log("Twitter validation details - starts with @: true, valid length: " + (
              validLength ? "true" : "false"
            ) + ", valid chars: " + (
              validChars ? "true" : "false"
            ));
        result = isValid;
      } else {
        console.log("Twitter username must start with @");
        result = false;
      }
    } else {
      result = true;
    }
    console.log("Twitter validation result: " + (
          result ? "true" : "false"
        ));
    return result;
  };
  var validateTelegram = function (telegram) {
    console.log("Validating telegram: " + Core__Option.getOr(telegram, "None"));
    var result;
    if (telegram !== undefined && telegram !== "") {
      var startsWithAt = telegram.startsWith("@");
      if (startsWithAt) {
        var usernameWithoutAt = telegram.substring(1);
        var validLength = usernameWithoutAt.length >= 5 && usernameWithoutAt.length <= 32;
        var validChars = new RegExp("^[a-zA-Z0-9_]+$").test(usernameWithoutAt);
        var isValid = validLength && validChars;
        console.log("Telegram validation details - starts with @: true, valid length: " + (
              validLength ? "true" : "false"
            ) + ", valid chars: " + (
              validChars ? "true" : "false"
            ));
        result = isValid;
      } else {
        console.log("Telegram username must start with @");
        result = false;
      }
    } else {
      result = true;
    }
    console.log("Telegram validation result: " + (
          result ? "true" : "false"
        ));
    return result;
  };
  var handleSubmit = async function ($$event) {
    $$event.preventDefault();
    console.log("Starting form submission");
    try {
      setGithubError(function (param) {
            
          });
      setEmailError(function (param) {
            
          });
      setWebsiteError(function (param) {
            
          });
      setAvatarError(function (param) {
            
          });
      setTwitterError(function (param) {
            
          });
      setTelegramError(function (param) {
            
          });
      setError(function (param) {
            
          });
      console.log("Checking validations");
      var isEmailValid = validateEmail(email$1);
      console.log("Email valid: " + (
            isEmailValid ? "true" : "false"
          ));
      var isWebsiteValid = validateWebsite(website$1);
      console.log("Website valid: " + (
            isWebsiteValid ? "true" : "false"
          ));
      var isGithubValid = validateGithub(github$1);
      console.log("Github valid: " + (
            isGithubValid ? "true" : "false"
          ));
      var isAvatarValid = validateAvatar(avatar$1);
      console.log("Avatar valid: " + (
            isAvatarValid ? "true" : "false"
          ));
      var isTwitterValid = validateTwitter(twitter$1);
      console.log("Twitter valid: " + (
            isTwitterValid ? "true" : "false"
          ));
      var isTelegramValid = validateTelegram(telegram$1);
      console.log("Telegram valid: " + (
            isTelegramValid ? "true" : "false"
          ));
      console.log("Setting error messages if needed");
      if (!isEmailValid) {
        setEmailError(function (param) {
              return "Please enter a valid email address";
            });
        console.log("Set email error");
      }
      if (!isWebsiteValid) {
        setWebsiteError(function (param) {
              return "Please enter a valid website URL";
            });
        console.log("Set website error");
      }
      if (!isGithubValid) {
        setGithubError(function (param) {
              return "Please enter a valid GitHub username";
            });
        console.log("Set github error");
      }
      if (!isAvatarValid) {
        setAvatarError(function (param) {
              return "Please enter a valid URL for avatar";
            });
        console.log("Set avatar error");
      }
      if (!isTwitterValid) {
        setTwitterError(function (param) {
              return "Please enter a valid X (Twitter) username";
            });
        console.log("Set twitter error");
      }
      if (!isTelegramValid) {
        setTelegramError(function (param) {
              return "Please enter a valid Telegram username";
            });
        console.log("Set telegram error");
      }
      console.log("Combined validation result: " + (
            isEmailValid && isWebsiteValid && isGithubValid && isAvatarValid && isTwitterValid && isTelegramValid ? "true" : "false"
          ));
      if (!(isEmailValid && isWebsiteValid && isGithubValid && isAvatarValid && isTwitterValid && isTelegramValid)) {
        return ;
      }
      console.log("All validations passed, proceeding with form submission");
      setError(function (param) {
            
          });
      setLoading(function (param) {
            return true;
          });
      var walletClient = Core__Option.getExn(OnChainOperationsCommon.buildWalletClient(), undefined);
      var match = Core__Option.getExn(primaryName, undefined);
      var initialAvatar = profile[7];
      var initialEmail = profile[6];
      var initialWebsite = profile[5];
      var initialGithub = profile[4];
      var initialTelegram = profile[3];
      var initialTwitter = profile[2];
      var initialLocation = profile[1];
      var initialDescription = profile[0];
      var name = match.name;
      var calls = [];
      if (description$1 !== undefined && !(initialDescription !== undefined && description$1 === initialDescription)) {
        calls.push(L2Resolver.encodeSetText(name, "description", description$1));
      }
      if ($$location$1 !== undefined && !(initialLocation !== undefined && $$location$1 === initialLocation)) {
        calls.push(L2Resolver.encodeSetText(name, "location", $$location$1));
      }
      if (twitter$1 !== undefined && !(initialTwitter !== undefined && twitter$1 === initialTwitter)) {
        calls.push(L2Resolver.encodeSetText(name, "twitter", twitter$1));
      }
      if (telegram$1 !== undefined && !(initialTelegram !== undefined && telegram$1 === initialTelegram)) {
        calls.push(L2Resolver.encodeSetText(name, "telegram", telegram$1));
      }
      if (github$1 !== undefined && !(initialGithub !== undefined && github$1 === initialGithub)) {
        calls.push(L2Resolver.encodeSetText(name, "github", github$1));
      }
      if (website$1 !== undefined && !(initialWebsite !== undefined && website$1 === initialWebsite)) {
        calls.push(L2Resolver.encodeSetText(name, "website", website$1));
      }
      if (email$1 !== undefined && !(initialEmail !== undefined && email$1 === initialEmail)) {
        calls.push(L2Resolver.encodeSetText(name, "email", email$1));
      }
      if (avatar$1 !== undefined && !(initialAvatar !== undefined && avatar$1 === initialAvatar)) {
        calls.push(L2Resolver.encodeSetText(name, "avatar", avatar$1));
      }
      try {
        console.log("Attempting to save to blockchain");
        await L2Resolver.multicallWithNodeCheck(walletClient, name, calls);
        console.log("Successfully saved to blockchain");
        setLoading(function (param) {
              return false;
            });
        return onSave([
                    description$1,
                    $$location$1,
                    twitter$1,
                    telegram$1,
                    github$1,
                    website$1,
                    email$1,
                    avatar$1
                  ]);
      }
      catch (raw_e){
        var e = Caml_js_exceptions.internalToOCamlException(raw_e);
        if (e.RE_EXN_ID === Js_exn.$$Error) {
          var errorMessage = Core__Option.getOr(e._1.message, "Unknown error");
          console.log("Error saving to blockchain: " + errorMessage);
          setLoading(function (param) {
                return false;
              });
          var isUserRejection = errorMessage.includes("User denied") || errorMessage.includes("user rejected") || errorMessage.includes("User rejected") || errorMessage.includes("rejected transaction") || errorMessage.includes("cancelled") || errorMessage.includes("canceled") ? true : false;
          if (!isUserRejection) {
            return setError(function (param) {
                        return errorMessage;
                      });
          } else {
            return ;
          }
        }
        throw e;
      }
    }
    catch (raw_e$1){
      var e$1 = Caml_js_exceptions.internalToOCamlException(raw_e$1);
      if (e$1.RE_EXN_ID === Js_exn.$$Error) {
        var e$2 = e$1._1;
        console.log("Unexpected error in form submission: " + Core__Option.getOr(e$2.message, "Unknown error"));
        setLoading(function (param) {
              return false;
            });
        return setError(function (param) {
                    return Core__Option.getOr(e$2.message, "An unexpected error occurred");
                  });
      }
      console.log("Unknown error type in form submission");
      setLoading(function (param) {
            return false;
          });
      return setError(function (param) {
                  return "An unexpected error occurred";
                });
    }
  };
  return React.createElement("div", {
              className: "p-8"
            }, React.createElement("div", {
                  className: "w-full max-w-xl mx-auto"
                }, React.createElement("div", {
                      className: "bg-white rounded-custom shadow-lg overflow-hidden"
                    }, React.createElement("div", {
                          className: "p-8 py-6 border-b border-gray-200 relative"
                        }, React.createElement("h1", {
                              className: "text-3xl font-bold text-gray-900"
                            }, "Edit Profile"), React.createElement("div", {
                              className: "text-sm text-gray-500"
                            }, "All fields are optional"), React.createElement("button", {
                              className: "hover:text-gray-500 dark:text-gray-500 dark:hover:text-gray-300 rounded-full transition-colors absolute right-8 top-1/2 -translate-y-1/2",
                              onClick: (function (param) {
                                  onCancel();
                                })
                            }, React.createElement(Icons.Close.make, {}))), React.createElement("div", {
                          className: "p-8"
                        }, React.createElement("form", {
                              onSubmit: (function (e) {
                                  handleSubmit(e);
                                })
                            }, React.createElement("div", {
                                  className: "space-y-6"
                                }, React.createElement("div", undefined, React.createElement("label", {
                                          className: "block text-sm font-medium mb-2 text-gray-700"
                                        }, "Description"), React.createElement("textarea", {
                                          className: "w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors",
                                          placeholder: "About yourself...",
                                          rows: 4,
                                          value: Core__Option.getOr(description$1, ""),
                                          onChange: (function ($$event) {
                                              var value = $$event.target.value;
                                              setDescription(function (param) {
                                                    if (value === "") {
                                                      return ;
                                                    } else {
                                                      return value;
                                                    }
                                                  });
                                            })
                                        })), React.createElement("div", undefined, React.createElement("label", {
                                          className: "block text-sm font-medium mb-2 text-gray-700"
                                        }, "Avatar"), React.createElement("input", {
                                          className: "w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors",
                                          placeholder: "https://",
                                          type: "text",
                                          value: Core__Option.getOr(avatar$1, ""),
                                          onChange: (function ($$event) {
                                              setAvatar(function (param) {
                                                    return $$event.target.value;
                                                  });
                                            })
                                        }), React.createElement("div", {
                                          className: "text-xs text-gray-400 mt-2"
                                        }, " (Optional) Upload your avatar using an IPFS pinning service such as ", React.createElement("a", {
                                              className: "hover:text-gray-600 underline",
                                              href: "https://pinata.cloud/",
                                              rel: "noopener noreferrer",
                                              target: "_blank"
                                            }, "https://pinata.cloud/"), "."), avatarError !== undefined ? React.createElement("div", {
                                            className: "mt-1 text-sm text-red-600"
                                          }, avatarError) : null), React.createElement("div", undefined, React.createElement("label", {
                                          className: "block text-sm font-medium mb-2 text-gray-700"
                                        }, "Location"), React.createElement("input", {
                                          className: "w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors",
                                          placeholder: "City, Country",
                                          type: "text",
                                          value: Core__Option.getOr($$location$1, ""),
                                          onChange: (function ($$event) {
                                              var value = $$event.target.value;
                                              setLocation(function (param) {
                                                    if (value === "") {
                                                      return ;
                                                    } else {
                                                      return value;
                                                    }
                                                  });
                                            })
                                        })), React.createElement("div", undefined, React.createElement("label", {
                                          className: "block text-sm font-medium mb-2 text-gray-700"
                                        }, "X (Twitter)"), React.createElement("input", {
                                          className: "w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors",
                                          placeholder: "@username",
                                          type: "text",
                                          value: Core__Option.getOr(twitter$1, ""),
                                          onChange: (function ($$event) {
                                              setTwitter(function (param) {
                                                    return $$event.target.value;
                                                  });
                                            })
                                        }), twitterError !== undefined ? React.createElement("div", {
                                            className: "mt-1 text-sm text-red-600"
                                          }, twitterError) : null), React.createElement("div", undefined, React.createElement("label", {
                                          className: "block text-sm font-medium mb-2 text-gray-700"
                                        }, "Telegram"), React.createElement("input", {
                                          className: "w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors",
                                          placeholder: "@username",
                                          type: "text",
                                          value: Core__Option.getOr(telegram$1, ""),
                                          onChange: (function ($$event) {
                                              setTelegram(function (param) {
                                                    return $$event.target.value;
                                                  });
                                            })
                                        }), telegramError !== undefined ? React.createElement("div", {
                                            className: "mt-1 text-sm text-red-600"
                                          }, telegramError) : null), React.createElement("div", undefined, React.createElement("label", {
                                          className: "block text-sm font-medium mb-2 text-gray-700"
                                        }, "GitHub Username"), React.createElement("input", {
                                          className: "w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors",
                                          placeholder: "username",
                                          type: "text",
                                          value: Core__Option.getOr(github$1, ""),
                                          onChange: (function ($$event) {
                                              var value = $$event.target.value;
                                              setGithub(function (param) {
                                                    if (value === "") {
                                                      return ;
                                                    } else {
                                                      return value;
                                                    }
                                                  });
                                            })
                                        }), React.createElement("div", {
                                          className: "text-xs text-gray-400 mt-2"
                                        }, "https://github.com/", React.createElement("span", {
                                              className: "text-gray-600 font-bold"
                                            }, "username")), githubError !== undefined ? React.createElement("div", {
                                            className: "mt-1 text-sm text-red-600"
                                          }, githubError) : null), React.createElement("div", undefined, React.createElement("label", {
                                          className: "block text-sm font-medium mb-2 text-gray-700"
                                        }, "Website"), React.createElement("input", {
                                          className: "w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors",
                                          placeholder: "https://",
                                          type: "url",
                                          value: Core__Option.getOr(website$1, ""),
                                          onChange: (function ($$event) {
                                              var value = $$event.target.value;
                                              setWebsite(function (param) {
                                                    if (value === "") {
                                                      return ;
                                                    } else {
                                                      return value;
                                                    }
                                                  });
                                            })
                                        }), websiteError !== undefined ? React.createElement("div", {
                                            className: "mt-1 text-sm text-red-600"
                                          }, websiteError) : null), React.createElement("div", undefined, React.createElement("label", {
                                          className: "block text-sm font-medium mb-2 text-gray-700"
                                        }, "Email"), React.createElement("input", {
                                          className: "w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors",
                                          placeholder: "your@email.com",
                                          type: "email",
                                          value: Core__Option.getOr(email$1, ""),
                                          onChange: (function ($$event) {
                                              var value = $$event.target.value;
                                              setEmail(function (param) {
                                                    if (value === "") {
                                                      return ;
                                                    } else {
                                                      return value;
                                                    }
                                                  });
                                            })
                                        }), emailError !== undefined ? React.createElement("div", {
                                            className: "mt-1 text-sm text-red-600"
                                          }, emailError) : null), error !== undefined ? React.createElement("div", {
                                        className: "mt-4 text-sm text-red-600"
                                      }, error) : null, React.createElement("div", {
                                      className: "flex justify-end space-x-4 mt-8"
                                    }, React.createElement("button", {
                                          className: "rounded-xl bg-zinc-800 px-6 py-3 font-semibold text-white hover:bg-zinc-700 " + (
                                            loading ? "opacity-50 cursor-not-allowed" : "hover:bg-zinc-500"
                                          ) + " focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500",
                                          disabled: loading,
                                          type: "submit"
                                        }, loading ? "Saving..." : "Save Profile"))))))));
}

var make = ProfileForm;

export {
  make ,
}
/* Icons Not a pure module */
