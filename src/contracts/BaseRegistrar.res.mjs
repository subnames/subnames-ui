// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Viem from "viem";
import * as Constants from "../Constants.res.mjs";
import * as OnChainOperationsCommon from "./OnChainOperationsCommon.res.mjs";

var baseRegistrarContract = {
  address: Constants.baseRegistrarContractAddress,
  abi: [
    {
      type: "function",
      name: "nameExpires",
      inputs: [{
          name: "id",
          type: "uint256"
        }],
      outputs: [{
          name: "expiry",
          type: "uint256"
        }],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "safeTransferFrom",
      inputs: [
        {
          name: "from",
          type: "address"
        },
        {
          name: "to",
          type: "address"
        },
        {
          name: "tokenId",
          type: "uint256"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "reclaim",
      inputs: [
        {
          name: "id",
          type: "uint256"
        },
        {
          name: "owner",
          type: "address"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "ownerOf",
      inputs: [{
          name: "id",
          type: "uint256"
        }],
      outputs: [{
          name: "result",
          type: "address"
        }],
      stateMutability: "view"
    }
  ]
};

async function nameExpires(name) {
  var tokenId = BigInt(Viem.keccak256(name));
  return await OnChainOperationsCommon.publicClient.readContract({
              address: baseRegistrarContract.address,
              abi: baseRegistrarContract.abi,
              functionName: "nameExpires",
              args: [tokenId]
            });
}

async function getTokenOwner(name) {
  var tokenId = BigInt(Viem.keccak256(name));
  return await OnChainOperationsCommon.publicClient.readContract({
              address: baseRegistrarContract.address,
              abi: baseRegistrarContract.abi,
              functionName: "ownerOf",
              args: [tokenId]
            });
}

async function reclaim(walletClient, tokenId, newOwner) {
  var currentAddress = await OnChainOperationsCommon.currentAddress(walletClient);
  var match = await OnChainOperationsCommon.publicClient.simulateContract({
        account: currentAddress,
        address: Constants.baseRegistrarContractAddress,
        abi: [{
            type: "function",
            name: "reclaim",
            inputs: [
              {
                name: "id",
                type: "uint256"
              },
              {
                name: "owner",
                type: "address"
              }
            ],
            outputs: [],
            stateMutability: "nonpayable"
          }],
        functionName: "reclaim",
        args: [
          tokenId,
          newOwner
        ]
      });
  var hash = await walletClient.writeContract(match.request);
  var match$1 = await OnChainOperationsCommon.waitForTransactionReceiptWithRetry(OnChainOperationsCommon.publicClient, hash, undefined, undefined);
  console.log(hash + " confirmed in block " + match$1.blockNumber.toString() + ", status: " + match$1.status);
  return hash;
}

async function safeTransferFrom(walletClient, from, to, tokenId) {
  var match = await OnChainOperationsCommon.publicClient.simulateContract({
        account: from,
        address: Constants.baseRegistrarContractAddress,
        abi: [{
            type: "function",
            name: "safeTransferFrom",
            inputs: [
              {
                name: "from",
                type: "address"
              },
              {
                name: "to",
                type: "address"
              },
              {
                name: "tokenId",
                type: "uint256"
              }
            ],
            outputs: [],
            stateMutability: "payable"
          }],
        functionName: "safeTransferFrom",
        args: [
          from,
          to,
          tokenId
        ]
      });
  var hash = await walletClient.writeContract(match.request);
  var match$1 = await OnChainOperationsCommon.waitForTransactionReceiptWithRetry(OnChainOperationsCommon.publicClient, hash, undefined, undefined);
  console.log("transfer confirmed in block " + match$1.blockNumber.toString() + ", status: " + match$1.status);
  return hash;
}

var getNameExpiry = nameExpires;

export {
  baseRegistrarContract ,
  nameExpires ,
  getNameExpiry ,
  getTokenOwner ,
  reclaim ,
  safeTransferFrom ,
}
/* viem Not a pure module */
