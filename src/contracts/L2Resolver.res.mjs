// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Viem from "viem";
import * as Ens from "viem/ens";
import * as Constants from "../Constants.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as OnChainOperationsCommon from "./OnChainOperationsCommon.res.mjs";

var resolverContract = {
  address: Constants.resolverContractAddress,
  abi: [
    {
      inputs: [{
          internalType: "bytes32",
          name: "node",
          type: "bytes32"
        }],
      name: "name",
      outputs: [{
          internalType: "string",
          name: "",
          type: "string"
        }],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "bytes32",
          name: "nodehash",
          type: "bytes32"
        },
        {
          internalType: "bytes[]",
          name: "data",
          type: "bytes[]"
        }
      ],
      name: "multicallWithNodeCheck",
      outputs: [{
          internalType: "bytes[]",
          name: "results",
          type: "bytes[]"
        }],
      stateMutability: "nonpayable",
      type: "function"
    }
  ]
};

async function name(address) {
  var node = Viem.keccak256(Viem.encodePacked([
            "bytes32",
            "bytes32"
          ], [
            "0x32347c1de91cbc71535aee17456bbe8987cc116a2782950e2697c6fc411ba53f",
            OnChainOperationsCommon.sha3HexAddress(address)
          ]));
  return await OnChainOperationsCommon.publicClient.readContract({
              address: resolverContract.address,
              abi: resolverContract.abi,
              functionName: "name",
              args: [node]
            });
}

async function multicallWithNodeCheck(walletClient, name, calls) {
  var node = Ens.namehash(name + "." + Constants.sld);
  var currentAddress = await OnChainOperationsCommon.currentAddress(walletClient);
  var match = await OnChainOperationsCommon.publicClient.simulateContract({
        account: currentAddress,
        address: resolverContract.address,
        abi: resolverContract.abi,
        functionName: "multicallWithNodeCheck",
        args: [
          node,
          calls
        ]
      });
  var hash = await walletClient.writeContract(match.request);
  var match$1 = await OnChainOperationsCommon.waitForTransactionReceiptWithRetry(OnChainOperationsCommon.publicClient, hash, undefined, undefined);
  console.log(hash + " confirmed in block " + match$1.blockNumber.toString() + ", status: " + match$1.status);
}

function encodeSetText(name, key, value) {
  var node = Ens.namehash(name + "." + Constants.sld);
  var abi = [{
      type: "function",
      name: "setText",
      inputs: [
        {
          name: "node",
          type: "bytes32"
        },
        {
          name: "key",
          type: "string"
        },
        {
          name: "value",
          type: "string"
        }
      ],
      outputs: [],
      stateMutability: "view"
    }];
  return Viem.encodeFunctionData({
              abi: abi,
              functionName: "setText",
              args: [
                node,
                key,
                value
              ]
            });
}

function encodeSetAddr(name, owner) {
  var node = Ens.namehash(name + "." + Constants.sld);
  var abi = [{
      type: "function",
      name: "setAddr",
      inputs: [
        {
          name: "node",
          type: "bytes32"
        },
        {
          name: "addr",
          type: "address"
        }
      ],
      outputs: [],
      stateMutability: "view"
    }];
  return Viem.encodeFunctionData({
              abi: abi,
              functionName: "setAddr",
              args: [
                node,
                owner
              ]
            });
}

function encodeSetName(name) {
  var abi = [{
      type: "function",
      name: "setName",
      inputs: [{
          name: "name",
          type: "string"
        }],
      outputs: [],
      stateMutability: "view"
    }];
  return Viem.encodeFunctionData({
              abi: abi,
              functionName: "setName",
              args: [name]
            });
}

async function setAddr(walletClient, name, a) {
  var domain = name + "." + Constants.sld;
  var node = Ens.namehash(domain);
  var address = Viem.getAddress(a);
  var currentAddr = await OnChainOperationsCommon.currentAddress(walletClient);
  var match = await OnChainOperationsCommon.publicClient.simulateContract({
        account: currentAddr,
        address: Constants.resolverContractAddress,
        abi: [{
            type: "function",
            name: "setAddr",
            inputs: [
              {
                name: "node",
                type: "bytes32"
              },
              {
                name: "a",
                type: "address"
              }
            ],
            outputs: [],
            stateMutability: "nonpayable"
          }],
        functionName: "setAddr",
        args: [
          node,
          address
        ]
      });
  var hash = await walletClient.writeContract(match.request);
  var match$1 = await OnChainOperationsCommon.waitForTransactionReceiptWithRetry(OnChainOperationsCommon.publicClient, hash, undefined, undefined);
  console.log("setAddr confirmed in block " + match$1.blockNumber.toString() + ", status: " + match$1.status);
  return hash;
}

async function setName(walletClient, name) {
  var currentAddress = await OnChainOperationsCommon.currentAddress(walletClient);
  var hash = await walletClient.writeContract({
        address: Constants.reverseRegistrarContractAddress,
        abi: [{
            type: "function",
            name: "setName",
            inputs: [{
                name: "name",
                type: "string"
              }],
            outputs: [],
            stateMutability: "nonpayable"
          }],
        functionName: "setName",
        account: currentAddress,
        args: [name]
      });
  var match = await OnChainOperationsCommon.waitForTransactionReceiptWithRetry(OnChainOperationsCommon.publicClient, hash, undefined, undefined);
  console.log("setName confirmed in block " + match.blockNumber.toString() + ", status: " + match.status);
  return hash;
}

async function getText(name, key) {
  var node = Ens.namehash(name + "." + Constants.sld);
  var result = await OnChainOperationsCommon.publicClient.readContract({
        address: resolverContract.address,
        abi: [{
            type: "function",
            name: "text",
            inputs: [
              {
                name: "node",
                type: "bytes32"
              },
              {
                name: "key",
                type: "string"
              }
            ],
            outputs: [{
                name: "",
                type: "string"
              }],
            stateMutability: "view"
          }],
        functionName: "text",
        args: [
          node,
          key
        ]
      });
  if (result === "") {
    return ;
  } else {
    return Caml_option.some(result);
  }
}

async function getAddr(name) {
  var domain = name + "." + Constants.sld;
  var node = Ens.namehash(domain);
  try {
    return Caml_option.some(await OnChainOperationsCommon.publicClient.readContract({
                    address: resolverContract.address,
                    abi: [{
                        type: "function",
                        name: "addr",
                        inputs: [{
                            name: "node",
                            type: "bytes32"
                          }],
                        outputs: [{
                            name: "",
                            type: "address"
                          }],
                        stateMutability: "view"
                      }],
                    functionName: "addr",
                    args: [node]
                  }));
  }
  catch (exn){
    return ;
  }
}

export {
  resolverContract ,
  name ,
  multicallWithNodeCheck ,
  encodeSetText ,
  encodeSetAddr ,
  encodeSetName ,
  setAddr ,
  setName ,
  getText ,
  getAddr ,
}
/* viem Not a pure module */
