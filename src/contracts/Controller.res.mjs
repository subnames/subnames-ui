// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Constants from "../Constants.res.mjs";
import * as L2Resolver from "./L2Resolver.res.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as OnChainOperationsCommon from "./OnChainOperationsCommon.res.mjs";

var controllerContract = {
  address: Constants.controllerContractAddress,
  abi: [
    {
      type: "function",
      name: "available",
      inputs: [{
          name: "name",
          type: "string"
        }],
      outputs: [{
          name: "",
          type: "bool"
        }],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "registerPrice",
      inputs: [
        {
          name: "name",
          type: "string"
        },
        {
          name: "duration",
          type: "uint256"
        }
      ],
      outputs: [{
          name: "",
          type: "uint256"
        }],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "rentPrice",
      inputs: [
        {
          name: "name",
          type: "string"
        },
        {
          name: "duration",
          type: "uint256"
        }
      ],
      outputs: [{
          name: "",
          type: "uint256"
        }],
      stateMutability: "view"
    }
  ],
  register: {
    inputs: [{
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string"
          },
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "duration",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "resolver",
            type: "address"
          },
          {
            internalType: "bytes[]",
            name: "data",
            type: "bytes[]"
          },
          {
            internalType: "bool",
            name: "reverseRecord",
            type: "bool"
          }
        ],
        internalType: "struct RegistrarController.RegisterRequest",
        name: "request",
        type: "tuple"
      }],
    name: "register",
    outputs: Core__Array.make(0, undefined),
    stateMutability: "payable",
    type: "function"
  },
  renew: {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string"
      },
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256"
      }
    ],
    name: "renew",
    outputs: Core__Array.make(0, undefined),
    stateMutability: "payable",
    type: "function"
  }
};

async function available(name) {
  return await OnChainOperationsCommon.publicClient.readContract({
              address: controllerContract.address,
              abi: controllerContract.abi,
              functionName: "available",
              args: [name]
            });
}

async function registerPrice(name, duration) {
  var args = [
    name,
    duration
  ];
  return BigInt(await OnChainOperationsCommon.publicClient.readContract({
                  address: controllerContract.address,
                  abi: controllerContract.abi,
                  functionName: "registerPrice",
                  args: args
                }));
}

async function rentPrice(name, duration) {
  var args = [
    name,
    duration
  ];
  return await OnChainOperationsCommon.publicClient.readContract({
              address: controllerContract.address,
              abi: controllerContract.abi,
              functionName: "rentPrice",
              args: args
            });
}

async function register(walletClient, name, years, owner, onStatusChange) {
  console.log("Registering " + name);
  onStatusChange("Simulating");
  var duration = Math.imul(years, 31536000);
  var currentAddress = await OnChainOperationsCommon.currentAddress(walletClient);
  var resolvedAddress = Core__Option.getOr(owner, currentAddress);
  var setAddrData = L2Resolver.encodeSetAddr(name, resolvedAddress);
  var priceInWei = await registerPrice(name, duration);
  var match = await OnChainOperationsCommon.publicClient.simulateContract({
        account: currentAddress,
        address: controllerContract.address,
        abi: [controllerContract.register],
        functionName: "register",
        args: [{
            name: name,
            owner: resolvedAddress,
            duration: duration,
            resolver: Constants.resolverContractAddress,
            data: [setAddrData],
            reverseRecord: true
          }],
        value: priceInWei
      });
  onStatusChange("WaitingForSignature");
  var hash = await walletClient.writeContract(match.request);
  onStatusChange("Broadcasting");
  await OnChainOperationsCommon.waitForTransactionReceiptWithRetry(OnChainOperationsCommon.publicClient, hash, undefined, undefined);
  return onStatusChange("Confirmed");
}

async function renew(walletClient, name, years) {
  var duration = Math.imul(years, 31536000);
  var currentAddress = await OnChainOperationsCommon.currentAddress(walletClient);
  var priceInWei = await rentPrice(name, duration);
  var match = await OnChainOperationsCommon.publicClient.simulateContract({
        account: currentAddress,
        address: controllerContract.address,
        abi: [controllerContract.renew],
        functionName: "renew",
        args: [
          name,
          duration
        ],
        value: priceInWei
      });
  var hash = await walletClient.writeContract(match.request);
  var match$1 = await OnChainOperationsCommon.waitForTransactionReceiptWithRetry(OnChainOperationsCommon.publicClient, hash, undefined, undefined);
  console.log(hash + " confirmed in block " + match$1.blockNumber.toString() + ", status: " + match$1.status);
}

export {
  controllerContract ,
  available ,
  registerPrice ,
  rentPrice ,
  register ,
  renew ,
}
/* controllerContract Not a pure module */
